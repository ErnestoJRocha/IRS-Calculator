// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using backend.Data;

namespace backend.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20200826075406_newInicialCreate")]
    partial class newInicialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("backend.Models.IRS_Area", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("IRS_Areas");
                });

            modelBuilder.Entity("backend.Models.IRS_Area_Nivel", b =>
                {
                    b.Property<int>("NivelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AreaId")
                        .HasColumnType("int");

                    b.HasKey("NivelId");

                    b.ToTable("IRS_Area_Nivels");
                });

            modelBuilder.Entity("backend.Models.IRS_Dependent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("number")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("IRS_Dependents");
                });

            modelBuilder.Entity("backend.Models.IRS_Marital_Status", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("IRS_Marital_States");
                });

            modelBuilder.Entity("backend.Models.IRS_Simulation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Area")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Bonus")
                        .HasColumnType("float");

                    b.Property<double?>("Car_Expenses")
                        .HasColumnType("float");

                    b.Property<double?>("Car_Fuel")
                        .HasColumnType("float");

                    b.Property<double?>("Car_Type")
                        .HasColumnType("float");

                    b.Property<double?>("Car_Value")
                        .HasColumnType("float");

                    b.Property<double?>("Daily_Rate")
                        .HasColumnType("float");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime2");

                    b.Property<double?>("Days_Months")
                        .HasColumnType("float");

                    b.Property<double?>("Dependents")
                        .HasColumnType("float");

                    b.Property<double?>("Extra_Tax")
                        .HasColumnType("float");

                    b.Property<double?>("Food")
                        .HasColumnType("float");

                    b.Property<double?>("Justified_Expenses")
                        .HasColumnType("float");

                    b.Property<string>("Marital_Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Months")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Position")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Syone_User_Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Target_Margin")
                        .HasColumnType("float");

                    b.Property<double?>("baseSalaryMonthGross")
                        .HasColumnType("float");

                    b.Property<double?>("baseSalaryMonthNet")
                        .HasColumnType("float");

                    b.Property<double?>("baseSalaryYearGross")
                        .HasColumnType("float");

                    b.Property<double?>("baseSalaryYearNet")
                        .HasColumnType("float");

                    b.Property<double?>("baseSalaryYearTotal")
                        .HasColumnType("float");

                    b.Property<double?>("bonusMonthGross")
                        .HasColumnType("float");

                    b.Property<double?>("bonusMonthNet")
                        .HasColumnType("float");

                    b.Property<double?>("bonusTotal")
                        .HasColumnType("float");

                    b.Property<double?>("bonusYearGross")
                        .HasColumnType("float");

                    b.Property<double?>("bonusYearNet")
                        .HasColumnType("float");

                    b.Property<double?>("carExpensesMonthGross")
                        .HasColumnType("float");

                    b.Property<double?>("carExpensesMonthNet")
                        .HasColumnType("float");

                    b.Property<double?>("carExpensesTotal")
                        .HasColumnType("float");

                    b.Property<double?>("carExpensesYearGross")
                        .HasColumnType("float");

                    b.Property<double?>("carExpensesYearNet")
                        .HasColumnType("float");

                    b.Property<double?>("carFuelMonthGross")
                        .HasColumnType("float");

                    b.Property<double?>("carFuelMonthNet")
                        .HasColumnType("float");

                    b.Property<double?>("carFuelTotal")
                        .HasColumnType("float");

                    b.Property<double?>("carFuelYearGross")
                        .HasColumnType("float");

                    b.Property<double?>("carFuelYearNet")
                        .HasColumnType("float");

                    b.Property<double?>("carMonthGross")
                        .HasColumnType("float");

                    b.Property<double?>("carMonthNet")
                        .HasColumnType("float");

                    b.Property<double?>("carTotal")
                        .HasColumnType("float");

                    b.Property<double?>("carYearGross")
                        .HasColumnType("float");

                    b.Property<double?>("carYearNet")
                        .HasColumnType("float");

                    b.Property<double?>("costDayWithBonus")
                        .HasColumnType("float");

                    b.Property<double?>("costDayWithoutBonus")
                        .HasColumnType("float");

                    b.Property<double?>("costMonthWithBonus")
                        .HasColumnType("float");

                    b.Property<double?>("costMonthWithoutBonus")
                        .HasColumnType("float");

                    b.Property<double?>("dayTargetMarginWithBonus")
                        .HasColumnType("float");

                    b.Property<double?>("dayTargetMarginWithoutBonus")
                        .HasColumnType("float");

                    b.Property<double?>("employeeIrsEuros")
                        .HasColumnType("float");

                    b.Property<double?>("employeeSocialSecurityEuros")
                        .HasColumnType("float");

                    b.Property<double?>("extraTaxEuros")
                        .HasColumnType("float");

                    b.Property<double?>("ihtMonthGross")
                        .HasColumnType("float");

                    b.Property<double?>("ihtMonthNet")
                        .HasColumnType("float");

                    b.Property<double?>("ihtTotal")
                        .HasColumnType("float");

                    b.Property<double?>("ihtYearGross")
                        .HasColumnType("float");

                    b.Property<double?>("ihtYearNet")
                        .HasColumnType("float");

                    b.Property<double?>("justifiedExpensesMonthGross")
                        .HasColumnType("float");

                    b.Property<double?>("justifiedExpensesMonthNet")
                        .HasColumnType("float");

                    b.Property<double?>("justifiedExpensesTotal")
                        .HasColumnType("float");

                    b.Property<double?>("justifiedExpensesYearGross")
                        .HasColumnType("float");

                    b.Property<double?>("justifiedExpensesYearNet")
                        .HasColumnType("float");

                    b.Property<double?>("marginWithBonus")
                        .HasColumnType("float");

                    b.Property<double?>("marginWithoutBonus")
                        .HasColumnType("float");

                    b.Property<double?>("monthTargetMarginWithBonus")
                        .HasColumnType("float");

                    b.Property<double?>("monthTargetMarginWithoutBonus")
                        .HasColumnType("float");

                    b.Property<double?>("proposedDailyRate")
                        .HasColumnType("float");

                    b.Property<double?>("proposedHourRate")
                        .HasColumnType("float");

                    b.Property<double?>("subsRefeicaoMonthGross")
                        .HasColumnType("float");

                    b.Property<double?>("subsRefeicaoMonthNet")
                        .HasColumnType("float");

                    b.Property<double?>("subsRefeicaoTotal")
                        .HasColumnType("float");

                    b.Property<double?>("subsRefeicaoYearGross")
                        .HasColumnType("float");

                    b.Property<double?>("subsRefeicaoYearNet")
                        .HasColumnType("float");

                    b.Property<double?>("totalMonthGross")
                        .HasColumnType("float");

                    b.Property<double?>("totalMonthNet")
                        .HasColumnType("float");

                    b.Property<double?>("totalMonthNetAfterExtraTaxWithBonus")
                        .HasColumnType("float");

                    b.Property<double?>("totalMonthNetAfterExtraTaxWithoutBonus")
                        .HasColumnType("float");

                    b.Property<double?>("totalTotal")
                        .HasColumnType("float");

                    b.Property<double?>("totalYearGross")
                        .HasColumnType("float");

                    b.Property<double?>("totalYearNet")
                        .HasColumnType("float");

                    b.Property<double?>("totalYearNetAfterExtraTaxWithBonus")
                        .HasColumnType("float");

                    b.Property<double?>("totalYearNetAfterExtraTaxWithoutBonus")
                        .HasColumnType("float");

                    b.Property<double?>("variableMonthGross")
                        .HasColumnType("float");

                    b.Property<double?>("variableMonthNet")
                        .HasColumnType("float");

                    b.Property<double?>("variableTotal")
                        .HasColumnType("float");

                    b.Property<double?>("variableYearGross")
                        .HasColumnType("float");

                    b.Property<double?>("variableYearNet")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("IRS_Simulations");
                });

            modelBuilder.Entity("backend.Models.IRS_Table", b =>
                {
                    b.Property<int>("id_row")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("fiscal_year")
                        .HasColumnType("nvarchar(4)");

                    b.Property<int>("id_irs_table")
                        .HasColumnType("int");

                    b.Property<string>("irs_table_name")
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("irs_tax")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("married_status")
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("num_dep")
                        .HasColumnType("int");

                    b.Property<decimal>("salary")
                        .HasColumnType("money");

                    b.HasKey("id_row");

                    b.ToTable("IRS_Table");
                });

            modelBuilder.Entity("backend.Models.IRS_Tax", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("A_La_Card")
                        .HasColumnType("float");

                    b.Property<int>("Car_Amortization")
                        .HasColumnType("int");

                    b.Property<double>("Company_Social_Security")
                        .HasColumnType("float");

                    b.Property<double>("Employee_Social_Security")
                        .HasColumnType("float");

                    b.Property<double>("Lunch")
                        .HasColumnType("float");

                    b.Property<double>("Minimum_Wage")
                        .HasColumnType("float");

                    b.Property<double>("Tta_Kms")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("IRS_Taxes");
                });

            modelBuilder.Entity("backend.Models.IRS_User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double?>("Bonus")
                        .HasColumnType("float");

                    b.Property<double?>("Car_Expenses")
                        .HasColumnType("float");

                    b.Property<double?>("Car_Fuel")
                        .HasColumnType("float");

                    b.Property<double?>("Car_Type")
                        .HasColumnType("float");

                    b.Property<double?>("Car_Value")
                        .HasColumnType("float");

                    b.Property<double?>("Daily_Rate")
                        .HasColumnType("float");

                    b.Property<int?>("Days_Months")
                        .HasColumnType("int");

                    b.Property<int?>("Dependents")
                        .HasColumnType("int");

                    b.Property<double?>("Extra_Tax")
                        .HasColumnType("float");

                    b.Property<double?>("Food")
                        .HasColumnType("float");

                    b.Property<double?>("Justified_Expenses")
                        .HasColumnType("float");

                    b.Property<int?>("Marital_Status_Id")
                        .HasColumnType("int");

                    b.Property<int?>("Months")
                        .HasColumnType("int");

                    b.Property<string>("Nivel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Nivelid")
                        .HasColumnType("int");

                    b.Property<string>("Nome")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Target_Margin")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("IRS_Users");
                });
#pragma warning restore 612, 618
        }
    }
}
